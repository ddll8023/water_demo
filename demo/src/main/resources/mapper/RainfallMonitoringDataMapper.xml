<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.demo.mapper.RainfallMonitoringDataMapper">

    <!-- 结果映射：降雨监测数据响应DTO -->
    <resultMap id="RainfallMonitoringDataResponseDTOMap" type="com.example.demo.dto.monitoring.RainfallMonitoringDataResponseDTO">
        <id property="id" column="id"/>
        <result property="stationId" column="station_id"/>
        <result property="stationName" column="station_name"/>
        <result property="stationCode" column="station_code"/>
        <result property="monitoringTime" column="monitoring_time"/>
        <result property="rainfall" column="rainfall"/>
        <result property="dataQuality" column="data_quality"/>
        <result property="dataQualityText" column="data_quality_text"/>
        <result property="collectionMethod" column="collection_method"/>
        <result property="collectionMethodText" column="collection_method_text"/>
        <result property="dataSource" column="data_source"/>
        <result property="remark" column="remark"/>
        <result property="createdAt" column="created_at"/>
        <result property="updatedAt" column="updated_at"/>
    </resultMap>

    <!-- 分页查询降雨监测数据（包含关联信息） -->
    <select id="selectRainfallMonitoringDataPage" resultMap="RainfallMonitoringDataResponseDTOMap">
        SELECT
        r.id, r.station_id, r.monitoring_time, r.rainfall,
        r.data_quality, r.collection_method, r.data_source, r.remark,
        r.created_at, r.updated_at,
        ms.name as station_name, ms.station_code,
        COALESCE(dq.data_label, '未知') as data_quality_text,
        COALESCE(cm.data_label, '未知') as collection_method_text
        FROM rainfall_monitoring_data r
        LEFT JOIN monitoring_stations ms ON r.station_id = ms.id AND ms.deleted_at IS NULL
        LEFT JOIN dict_data dq ON CAST(r.data_quality AS CHAR) COLLATE utf8mb4_unicode_ci = dq.data_value COLLATE utf8mb4_unicode_ci
            AND dq.type_id = (SELECT id FROM dict_types WHERE type_code = 'data_quality' LIMIT 1)
            AND dq.is_active = 1 AND dq.deleted_at IS NULL
        LEFT JOIN dict_data cm ON r.collection_method COLLATE utf8mb4_unicode_ci = cm.data_value COLLATE utf8mb4_unicode_ci
            AND cm.type_id = (SELECT id FROM dict_types WHERE type_code = 'collection_method' LIMIT 1)
            AND cm.is_active = 1 AND cm.deleted_at IS NULL
        WHERE r.deleted_at IS NULL 
        <if test='stationId != null'> AND r.station_id = #{stationId} </if>
        <if test='startTime != null'> AND r.monitoring_time &gt;= #{startTime} </if>
        <if test='endTime != null'> AND r.monitoring_time &lt;= #{endTime} </if>
        <if test='dataQuality != null'> AND r.data_quality = #{dataQuality} </if>
        <if test='collectionMethod != null and collectionMethod != ""'> AND r.collection_method = #{collectionMethod} </if>
        <if test='dataSource != null and dataSource != ""'> AND r.data_source LIKE CONCAT('%', #{dataSource}, '%') </if>
        ORDER BY 
        <choose>
          <when test='sort != null and sort.contains("monitoring_time,asc")'> r.monitoring_time ASC </when>
          <when test='sort != null and sort.contains("rainfall,desc")'> r.rainfall DESC </when>
          <when test='sort != null and sort.contains("rainfall,asc")'> r.rainfall ASC </when>
          <when test='sort != null and sort.contains("rainfall_intensity,desc")'> r.rainfall_intensity DESC </when>
          <when test='sort != null and sort.contains("rainfall_intensity,asc")'> r.rainfall_intensity ASC </when>
          <when test='sort != null and sort.contains("cumulative_rainfall,desc")'> r.cumulative_rainfall DESC </when>
          <when test='sort != null and sort.contains("cumulative_rainfall,asc")'> r.cumulative_rainfall ASC </when>
          <otherwise> r.monitoring_time DESC </otherwise>
        </choose>
    </select>

    <!-- 查询雨情统计数据 -->
    <select id="selectRainfallStatistics" resultType="java.util.Map">
        SELECT 
        COUNT(DISTINCT rainfall_monitoring_data.station_id) as total_stations, 
        AVG(rainfall_monitoring_data.rainfall) as avg_rainfall, 
        MAX(rainfall_monitoring_data.rainfall) as max_rainfall, 
        MIN(rainfall_monitoring_data.rainfall) as min_rainfall,
        SUM(rainfall_monitoring_data.rainfall) as total_rainfall,
        MAX(rainfall_monitoring_data.rainfall_intensity) as max_rainfall_intensity,
        AVG(rainfall_monitoring_data.rainfall_intensity) as avg_rainfall_intensity, 
        MAX(rainfall_monitoring_data.cumulative_rainfall) as max_cumulative_rainfall,
        COUNT(*) as total_data_count, 
        SUM(CASE WHEN rainfall_monitoring_data.data_quality = 1 THEN 1 ELSE 0 END) as normal_data_count, 
        SUM(CASE WHEN rainfall_monitoring_data.data_quality = 2 THEN 1 ELSE 0 END) as abnormal_data_count, 
        SUM(CASE WHEN rainfall_monitoring_data.data_quality = 3 THEN 1 ELSE 0 END) as missing_data_count, 
        ROUND(SUM(CASE WHEN rainfall_monitoring_data.data_quality = 1 THEN 1 ELSE 0 END) * 100.0 / COUNT(*), 2) as data_quality_rate 
        FROM rainfall_monitoring_data 
        WHERE rainfall_monitoring_data.deleted_at IS NULL 
        <if test='stationId != null'> AND rainfall_monitoring_data.station_id = #{stationId} </if>
        <if test='timeRange != null and timeRange == "today"'> AND DATE(rainfall_monitoring_data.monitoring_time) = CURDATE() </if>
        <if test='timeRange != null and timeRange == "week"'> AND rainfall_monitoring_data.monitoring_time &gt;= DATE_SUB(NOW(), INTERVAL 7 DAY) </if>
        <if test='timeRange != null and timeRange == "month"'> AND rainfall_monitoring_data.monitoring_time &gt;= DATE_SUB(NOW(), INTERVAL 30 DAY) </if>
    </select>

    <!-- 查询雨情图表数据 -->
    <select id="selectRainfallChartData" resultType="java.util.Map">
        SELECT
        DATE_FORMAT(rainfall_monitoring_data.monitoring_time,
        <choose>
          <when test='interval == "hour"'> '%Y-%m-%d %H:%i:%s' </when>
          <when test='interval == "day"'> '%Y-%m-%d' </when>
          <when test='interval == "month"'> '%Y-%m' </when>
          <otherwise> '%Y-%m-%d %H:%i:%s' </otherwise>
        </choose>
        ) as time_label,
        AVG(rainfall_monitoring_data.rainfall) as avg_rainfall,
        MAX(rainfall_monitoring_data.rainfall) as max_rainfall,
        MIN(rainfall_monitoring_data.rainfall) as min_rainfall,
        SUM(rainfall_monitoring_data.rainfall) as sum_rainfall,
        MAX(rainfall_monitoring_data.rainfall_intensity) as max_rainfall_intensity,
        AVG(rainfall_monitoring_data.rainfall_intensity) as avg_rainfall_intensity,
        MAX(rainfall_monitoring_data.cumulative_rainfall) as max_cumulative_rainfall,
        MIN(rainfall_monitoring_data.cumulative_rainfall) as min_cumulative_rainfall,
        COUNT(*) as data_count
        FROM rainfall_monitoring_data
        WHERE rainfall_monitoring_data.deleted_at IS NULL
        AND rainfall_monitoring_data.station_id = #{stationId}
        <if test='startTime != null'> AND rainfall_monitoring_data.monitoring_time &gt;= #{startTime} </if>
        <if test='endTime != null'> AND rainfall_monitoring_data.monitoring_time &lt;= #{endTime} </if>
        GROUP BY time_label
        ORDER BY time_label ASC
    </select>

    <!-- 查询所有站点的雨情图表数据（汇总） -->
    <select id="selectAllStationsRainfallChartData" resultType="java.util.Map">
        SELECT
        DATE_FORMAT(rainfall_monitoring_data.monitoring_time,
        <choose>
          <when test='interval == "hour"'> '%Y-%m-%d %H:%i:%s' </when>
          <when test='interval == "day"'> '%Y-%m-%d' </when>
          <when test='interval == "month"'> '%Y-%m' </when>
          <otherwise> '%Y-%m-%d %H:%i:%s' </otherwise>
        </choose>
        ) as time_label,
        AVG(rainfall_monitoring_data.rainfall) as avg_rainfall,
        MAX(rainfall_monitoring_data.rainfall) as max_rainfall,
        MIN(rainfall_monitoring_data.rainfall) as min_rainfall,
        SUM(rainfall_monitoring_data.rainfall) as sum_rainfall,
        MAX(rainfall_monitoring_data.rainfall_intensity) as max_rainfall_intensity,
        AVG(rainfall_monitoring_data.rainfall_intensity) as avg_rainfall_intensity,
        MAX(rainfall_monitoring_data.cumulative_rainfall) as max_cumulative_rainfall,
        COUNT(*) as data_count,
        COUNT(DISTINCT rainfall_monitoring_data.station_id) as station_count
        FROM rainfall_monitoring_data
        LEFT JOIN monitoring_stations ON rainfall_monitoring_data.station_id = monitoring_stations.id AND monitoring_stations.deleted_at IS NULL
        WHERE rainfall_monitoring_data.deleted_at IS NULL
        AND monitoring_stations.monitoring_item_code = 'R'
        <if test='stationId != null'> AND rainfall_monitoring_data.station_id = #{stationId} </if>
        <if test='startTime != null'> AND rainfall_monitoring_data.monitoring_time &gt;= #{startTime} </if>
        <if test='endTime != null'> AND rainfall_monitoring_data.monitoring_time &lt;= #{endTime} </if>
        GROUP BY time_label
        ORDER BY time_label ASC
    </select>

    <!-- 查询监测概览统计数据 -->
    <select id="selectMonitoringOverview" resultType="java.util.Map">
        SELECT
        COUNT(DISTINCT monitoring_stations.id) as total_stations,
        COUNT(DISTINCT CASE WHEN rainfall_monitoring_data.monitoring_time &gt;= DATE_SUB(NOW(), INTERVAL 1 HOUR) THEN monitoring_stations.id END) as online_stations,
        AVG(rainfall_monitoring_data.rainfall) as avg_rainfall,
        MAX(rainfall_monitoring_data.rainfall) as max_rainfall,
        SUM(rainfall_monitoring_data.rainfall) as total_rainfall,
        MAX(rainfall_monitoring_data.rainfall_intensity) as max_rainfall_intensity,
        AVG(rainfall_monitoring_data.rainfall_intensity) as avg_rainfall_intensity,
        MAX(rainfall_monitoring_data.cumulative_rainfall) as max_cumulative_rainfall,
        COUNT(CASE WHEN DATE(rainfall_monitoring_data.monitoring_time) = CURDATE() THEN 1 END) as today_data_count,
        ROUND(SUM(CASE WHEN rainfall_monitoring_data.data_quality = 1 THEN 1 ELSE 0 END) * 100.0 / COUNT(*), 2) as data_quality_rate
        FROM monitoring_stations
        LEFT JOIN rainfall_monitoring_data ON monitoring_stations.id = rainfall_monitoring_data.station_id AND rainfall_monitoring_data.deleted_at IS NULL
        WHERE monitoring_stations.deleted_at IS NULL
        AND monitoring_stations.monitoring_item_code = 'R'
    </select>

    <!-- 查询数据质量统计（按站点分组） -->
    <select id="selectDataQualityStatsByStation" resultType="java.util.Map">
        SELECT
        monitoring_stations.name as station_name,
        monitoring_stations.station_code,
        COUNT(*) as total_count,
        SUM(CASE WHEN rainfall_monitoring_data.data_quality = 1 THEN 1 ELSE 0 END) as normal_count,
        SUM(CASE WHEN rainfall_monitoring_data.data_quality = 2 THEN 1 ELSE 0 END) as abnormal_count,
        SUM(CASE WHEN rainfall_monitoring_data.data_quality = 3 THEN 1 ELSE 0 END) as missing_count,
        ROUND(SUM(CASE WHEN rainfall_monitoring_data.data_quality = 1 THEN 1 ELSE 0 END) * 100.0 / COUNT(*), 2) as quality_rate
        FROM rainfall_monitoring_data
        LEFT JOIN monitoring_stations ON rainfall_monitoring_data.station_id = monitoring_stations.id AND monitoring_stations.deleted_at IS NULL
        WHERE rainfall_monitoring_data.deleted_at IS NULL
        AND monitoring_stations.monitoring_item_code = 'R'
        <if test='timeRange != null and timeRange == "today"'> AND DATE(rainfall_monitoring_data.monitoring_time) = CURDATE() </if>
        <if test='timeRange != null and timeRange == "week"'> AND rainfall_monitoring_data.monitoring_time &gt;= DATE_SUB(NOW(), INTERVAL 7 DAY) </if>
        <if test='timeRange != null and timeRange == "month"'> AND rainfall_monitoring_data.monitoring_time &gt;= DATE_SUB(NOW(), INTERVAL 30 DAY) </if>
        GROUP BY monitoring_stations.id, monitoring_stations.name, monitoring_stations.station_code
        ORDER BY quality_rate DESC
    </select>

    <!-- 查询数据质量趋势数据 -->
    <select id="selectDataQualityTrend" resultType="java.util.Map">
        SELECT
        DATE_FORMAT(rainfall_monitoring_data.monitoring_time, '%Y-%m-%d') as date_label,
        COUNT(*) as total_count,
        SUM(CASE WHEN rainfall_monitoring_data.data_quality = 1 THEN 1 ELSE 0 END) as normal_count,
        SUM(CASE WHEN rainfall_monitoring_data.data_quality = 2 THEN 1 ELSE 0 END) as abnormal_count,
        SUM(CASE WHEN rainfall_monitoring_data.data_quality = 3 THEN 1 ELSE 0 END) as missing_count,
        ROUND(SUM(CASE WHEN rainfall_monitoring_data.data_quality = 1 THEN 1 ELSE 0 END) * 100.0 / COUNT(*), 2) as quality_rate
        FROM rainfall_monitoring_data
        WHERE rainfall_monitoring_data.deleted_at IS NULL
        <if test='timeRange != null and timeRange == "today"'> AND DATE(rainfall_monitoring_data.monitoring_time) = CURDATE() </if>
        <if test='timeRange != null and timeRange == "week"'> AND rainfall_monitoring_data.monitoring_time &gt;= DATE_SUB(NOW(), INTERVAL 7 DAY) </if>
        <if test='timeRange != null and timeRange == "month"'> AND rainfall_monitoring_data.monitoring_time &gt;= DATE_SUB(NOW(), INTERVAL 30 DAY) </if>
        GROUP BY date_label
        ORDER BY date_label ASC
    </select>

    <!-- 统计指定站点和时间的数据条数（用于重复性检查） -->
    <select id="countByStationIdAndTime" resultType="int">
        SELECT COUNT(*)
        FROM rainfall_monitoring_data
        WHERE deleted_at IS NULL
        AND station_id = #{stationId}
        AND monitoring_time = #{monitoringTime}
    </select>

</mapper> 